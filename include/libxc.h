COSMOPOLITAN_C_START_
struct FILE;
typedef struct FILE FILE;
extern FILE *stdin;
extern FILE *stdout;
extern FILE *stderr;
errno_t ferror(FILE *) libcesque paramsnonnull() __read_write(1);
void clearerr(FILE *) libcesque paramsnonnull() __read_write(1);
int feof(FILE *) libcesque paramsnonnull() __read_write(1);
int getc(FILE *) libcesque paramsnonnull() __read_write(1);
int putc(int, FILE *) libcesque paramsnonnull() __read_write(2);
int fflush(FILE *) libcesque __read_write(1);
int fpurge(FILE *) libcesque __read_write(1);
int fgetc(FILE *) libcesque paramsnonnull() __read_write(1);
char *fgetln(FILE *, size_t *) libcesque paramsnonnull((1)) __read_write(1) __write_only(2);
int ungetc(int, FILE *) libcesque paramsnonnull() __write_only(2);
int fileno(FILE *) libcesque paramsnonnull() nosideeffect __write_only(1);
int fputc(int, FILE *) libcesque paramsnonnull() __write_only(2);
int fputs(const char *, FILE *) libcesque paramsnonnull() __write_only(2);
int fputws(const wchar_t *, FILE *) libcesque paramsnonnull() __write_only(2);
void flockfile(FILE *) libcesque __write_only(1);
void funlockfile(FILE *) libcesque paramsnonnull() __write_only(1);
int ftrylockfile(FILE *) libcesque paramsnonnull() __write_only(1);
char *fgets(char *, int, FILE *) libcesque paramsnonnull() __write_only(1, 2) __read_write(3);
wchar_t *fgetws(wchar_t *, int, FILE *) libcesque paramsnonnull() __write_only(1, 2) __read_write(3);
wint_t putwc(wchar_t, FILE *) libcesque paramsnonnull() __write_only(2);
wint_t fputwc(wchar_t, FILE *) libcesque paramsnonnull() __write_only(2);
wint_t putwchar(wchar_t) libcesque;
wint_t getwchar(void) libcesque;
wint_t getwc(FILE *) libcesque paramsnonnull() __write_only(1);
wint_t fgetwc(FILE *) libcesque paramsnonnull() __write_only(1);
wint_t ungetwc(wint_t, FILE *) libcesque paramsnonnull() __write_only(2);
int getchar(void) libcesque;
int putchar(int) libcesque;
int puts(const char *) libcesque __read_only(1);
ssize_t getline(char **, size_t *, FILE *) libcesque paramsnonnull() __read_write(1) __read_write(2) __read_write(3);
ssize_t getdelim(char **, size_t *, int, FILE *) libcesque paramsnonnull() __read_write(1) __read_write(2) __read_write(4);
FILE *fopen(const char *, const char *) libcesque paramsnonnull((2)) __read_only(1) __read_only(2) __wur;
FILE *fdopen(int, const char *) libcesque paramsnonnull() __read_only(2) __wur;
FILE *fmemopen(void *, size_t, const char *) libcesque paramsnonnull((3)) __read_write(1) __read_only(3) __wur;
FILE *freopen(const char *, const char *, FILE *) paramsnonnull((2, 3)) __read_only(1) __read_only(2) __read_write(3);
size_t fread(void *, size_t, size_t, FILE *) libcesque paramsnonnull((4)) __write_only(1) __read_write(4);
size_t fwrite(const void *, size_t, size_t, FILE *) paramsnonnull((4)) __read_only(1) __read_write(4);
int fclose(FILE *) libcesque __read_write(1);
int fseek(FILE *, long, int) libcesque paramsnonnull() __read_write(1);
long ftell(FILE *) libcesque paramsnonnull() __read_write(1);
int fseeko(FILE *, int64_t, int) libcesque paramsnonnull() __read_write(1);
int64_t ftello(FILE *) libcesque paramsnonnull() __read_write(1);
void rewind(FILE *) libcesque paramsnonnull() __read_write(1);
int fopenflags(const char *) libcesque paramsnonnull() __read_only(1);
void setlinebuf(FILE *) libcesque __read_write(1);
void setbuf(FILE *, char *) libcesque __read_write(1) __write_only(2);
void setbuffer(FILE *, char *, size_t) libcesque __read_write(1) __write_only(2);
int setvbuf(FILE *, char *, int, size_t) libcesque __read_write(1);
int pclose(FILE *) libcesque __read_write(1);
char *ctermid(char *) libcesque __write_only(1);
void perror(const char *) libcesque relegated __read_only(1);
typedef uint64_t fpos_t;
char *gets(char *) libcesque paramsnonnull() __write_only(1);
int fgetpos(FILE *, fpos_t *) libcesque paramsnonnull() __read_write(1) __write_only(2);
int fsetpos(FILE *, const fpos_t *) libcesque paramsnonnull() __read_write(1) __read_only(2);
FILE *tmpfile(void) libcesque __wur;
char *tmpnam(char *) libcesque __write_only(1) __wur;
char *tmpnam_r(char *) libcesque __write_only(1) __wur;
FILE *popen(const char *, const char *) libcesque __read_only(1) __read_only(2);
int printf(const char *, ...) printfesque(1) paramsnonnull((1)) libcesque __read_only(1);
int vprintf(const char *, va_list) paramsnonnull() libcesque __read_only(1);
int fprintf(FILE *, const char *, ...) printfesque(2) paramsnonnull((1, 2)) libcesque __read_write(1) __read_only(2);
int vfprintf(FILE *, const char *, va_list) paramsnonnull() libcesque __read_write(1) __read_only(2);
int scanf(const char *, ...) libcesque scanfesque(1) __read_only(1);
int vscanf(const char *, va_list) libcesque __read_only(1);
int fscanf(FILE *, const char *, ...) libcesque scanfesque(2) __read_write(1) __read_only(2);
int vfscanf(FILE *, const char *, va_list) libcesque __read_write(1) __read_only(2);
int snprintf(char *, size_t, const char *, ...) printfesque(3) libcesque __write_only(1) __read_only(3);
int vsnprintf(char *, size_t, const char *, va_list) libcesque __write_only(1) __read_only(3);
int sprintf(char *, const char *, ...) libcesque __write_only(1) __read_only(2);
int vsprintf(char *, const char *, va_list) libcesque __write_only(1) __read_only(2);
int fwprintf(FILE *, const wchar_t *, ...) libcesque __read_write(1) __read_only(2);
int fwscanf(FILE *, const wchar_t *, ...) libcesque __read_write(1) __read_only(2);
int swprintf(wchar_t *, size_t, const wchar_t *, ...) libcesque __write_only(1) __read_only(3);
int swscanf(const wchar_t *, const wchar_t *, ...) libcesque __read_only(1) __read_only(2);
int vfwprintf(FILE *, const wchar_t *, va_list) libcesque __read_write(1) __read_only(2);
int vfwscanf(FILE *, const wchar_t *, va_list) libcesque __read_write(1) __read_only(2);
int vswprintf(wchar_t *, size_t, const wchar_t *, va_list) libcesque __write_only(1) __read_only(3);
int vswscanf(const wchar_t *, const wchar_t *, va_list) libcesque __read_only(1) __read_only(2);
int vwprintf(const wchar_t *, va_list) libcesque __read_only(1);
int vwscanf(const wchar_t *, va_list) libcesque __read_only(1);
int wprintf(const wchar_t *, ...) libcesque __read_only(1);
int wscanf(const wchar_t *, ...) libcesque __read_only(1);
int fwide(FILE *, int) libcesque __read_write(1);
int sscanf(const char *, const char *, ...) libcesque scanfesque(2) __read_only(1) __read_only(2);
int vsscanf(const char *, const char *, va_list) libcesque __read_only(1) __read_only(2);
int asprintf(char **, const char *, ...) printfesque(2) paramsnonnull((1, 2)) libcesque __write_only(1);
int vasprintf(char **, const char *, va_list) paramsnonnull() libcesque __write_only(1);
int getc_unlocked(FILE *) libcesque paramsnonnull() __read_write(1);
int puts_unlocked(const char *) libcesque __read_only(1);
int getchar_unlocked(void) libcesque;
int putc_unlocked(int, FILE *) libcesque paramsnonnull() __read_write(2);
int putchar_unlocked(int) libcesque;
void clearerr_unlocked(FILE *) libcesque __write_only(1);
int feof_unlocked(FILE *) libcesque __read_only(1);
int ferror_unlocked(FILE *) libcesque __read_only(1);
int fileno_unlocked(FILE *) libcesque __read_only(1);
int fflush_unlocked(FILE *) libcesque __read_write(1);
int fgetc_unlocked(FILE *) libcesque __read_write(1);
int fputc_unlocked(int, FILE *) libcesque __read_write(2);
size_t fread_unlocked(void *, size_t, size_t, FILE *) libcesque __write_only(1) __read_write(4);
size_t fwrite_unlocked(const void *, size_t, size_t, FILE *) libcesque __read_only(1) __read_write(4);
char *fgets_unlocked(char *, int, FILE *) libcesque __write_only(1) __read_write(3);
int fputs_unlocked(const char *, FILE *) libcesque __read_only(1) __read_write(2);
wint_t getwc_unlocked(FILE *) libcesque __read_write(1);
wint_t getwchar_unlocked(void) libcesque;
wint_t fgetwc_unlocked(FILE *) libcesque __read_write(1);
wint_t fputwc_unlocked(wchar_t, FILE *) libcesque __read_write(2);
wint_t putwc_unlocked(wchar_t, FILE *) libcesque __read_write(2);
wint_t putwchar_unlocked(wchar_t) libcesque;
wchar_t *fgetws_unlocked(wchar_t *, int, FILE *) libcesque __write_only(1, 2) __read_write(3);
int fputws_unlocked(const wchar_t *, FILE *) libcesque __read_only(1) __read_write(2);
wint_t ungetwc_unlocked(wint_t, FILE *) libcesque paramsnonnull() __read_write(2);
int ungetc_unlocked(int, FILE *) libcesque paramsnonnull() __read_write(2);
int fseek_unlocked(FILE *, int64_t, int) libcesque paramsnonnull() __read_write(1);
ssize_t getdelim_unlocked(char **, size_t *, int, FILE *) paramsnonnull() __read_write(1) __read_write(2) __read_write(4);
int fprintf_unlocked(FILE *, const char *, ...) printfesque(2) libcesque __read_write(1) __read_only(2);
int vfprintf_unlocked(FILE *, const char *, va_list) paramsnonnull() libcesque __read_write(1) __read_only(2);
COSMOPOLITAN_C_END_
COSMOPOLITAN_C_START_
void mcount(void) libcesque;
int daemon(int, int) libcesque;
unsigned long getauxval(unsigned long) libcesque;
int setjmp(jmp_buf) libcesque returnstwice paramsnonnull();
void longjmp(jmp_buf, int) libcesque wontreturn paramsnonnull();
int _setjmp(jmp_buf) libcesque returnstwice paramsnonnull();
int sigsetjmp(sigjmp_buf, int) libcesque returnstwice paramsnonnull();
void siglongjmp(sigjmp_buf, int) libcesque wontreturn paramsnonnull();
void _longjmp(jmp_buf, int) libcesque wontreturn paramsnonnull();
void exit(int) wontreturn;
void _exit(int) libcesque wontreturn;
void _Exit(int) libcesque wontreturn;
void quick_exit(int) wontreturn;
void abort(void) wontreturn;
int atexit(void (*)(void)) paramsnonnull() libcesque;
char *getenv(const char *) paramsnonnull() __wur nosideeffect libcesque;
int putenv(char *) libcesque __read_write(1);
int setenv(const char *, const char *, int) libcesque;
int unsetenv(const char *) libcesque;
int clearenv(void) libcesque;
void fpreset(void) libcesque;
void *mmap(void *, uint64_t, int32_t, int32_t, int32_t, int64_t) libcesque;
void *mremap(void *, size_t, size_t, int, ...) libcesque;
int munmap(void *, uint64_t) libcesque;
int mprotect(void *, uint64_t, int) libcesque;
int msync(void *, size_t, int) libcesque;
int mlock(const void *, size_t) libcesque;
int munlock(const void *, size_t) libcesque;
long gethostid(void) libcesque;
int sethostid(long) libcesque;
char *getlogin(void) libcesque;
int getlogin_r(char *, size_t) libcesque __write_only(1, 2);
int login_tty(int) libcesque __fd_arg(1);
int getpagesize(void) pureconst libcesque;
int getgransize(void) pureconst libcesque;
int syncfs(int) dontthrow libcesque;
int vhangup(void) libcesque;
int getdtablesize(void) libcesque;
int sethostname(const char *, size_t) libcesque;
int acct(const char *) libcesque;
COSMOPOLITAN_C_END_
typedef void* xc_val;
typedef void (*xc_initializer_func)(void);
typedef void (*xc_cleaner_func)(void);
typedef xc_val (*xc_creator_func)(int type, va_list args);
typedef int (*xc_destroy_func)(xc_val obj);
typedef void (*xc_marker_func)(xc_val obj, void (*mark_func)(xc_val));
typedef void* (*xc_allocator_func)(size_t size);
typedef xc_val (*xc_method_func)(xc_val self, xc_val arg);
typedef struct xc_exception_handler {
    jmp_buf env;
    xc_val catch_func;
    xc_val finally_func;
    struct xc_exception_handler* prev;
} xc_exception_handler_t;
typedef struct {
    xc_initializer_func initializer;
    xc_cleaner_func cleaner;
    xc_creator_func creator;
    xc_destroy_func destroyer;
    xc_allocator_func allocator;
    xc_marker_func marker;
} xc_type_lifecycle_t;
typedef struct xc_runtime_t {
    xc_val (*alloc_object)(int type, ...);
    xc_val (*create)(int type, ...);
    int (*type_of)(xc_val obj);
    int (*is)(xc_val obj, int type);
    int (*register_type)(const char* name, xc_type_lifecycle_t* lifecycle);
    int (*get_type_id)(const char* name);
    char (*register_method)(int type, const char* func_name, xc_method_func native_func);
    xc_val (*call)(xc_val obj, const char* method, ...);
    xc_val (*dot)(xc_val obj, const char* key, ...);
    xc_val (*invoke)(xc_val func, int argc, ...);
    xc_val (*try_catch_finally)(xc_val try_func, xc_val catch_func, xc_val finally_func);
    void (*throw)(xc_val error);
    void (*throw_with_rethrow)(xc_val error);
    void (*set_uncaught_exception_handler)(xc_val handler);
    xc_val (*get_current_error)(void);
    void (*clear_error)(void);
    void (*gc)(void);
    xc_val (*retain)(xc_val obj);
    void (*release)(xc_val obj);
    void (*mark)(xc_val obj);
} xc_runtime_t;
extern xc_runtime_t xc;
typedef xc_val (*xc_function_ptr_t)(xc_runtime_t *rt, xc_val this_obj, int argc, xc_val *argv);
typedef struct xc_object {
    size_t size;
    struct xc_type *type;
    int ref_count;
    int gc_color;
    struct xc_object *gc_next;
} xc_object_t;
typedef struct xc_type {
    const char *name;
    int flags;
    void (*free)(xc_runtime_t *rt, xc_object_t *obj);
    void (*mark)(xc_runtime_t *rt, xc_object_t *obj);
    _Bool (*equal)(xc_runtime_t *rt, xc_object_t *a, xc_object_t *b);
    int (*compare)(xc_runtime_t *rt, xc_object_t *a, xc_object_t *b);
} xc_type_t;
typedef struct xc_exception_frame xc_exception_frame_t;
typedef struct xc_runtime_extended {
    xc_runtime_t base;
    void *gc_context;
    xc_type_t *type_handlers[256];
    xc_exception_frame_t *exception_frame;
    xc_type_t *null_type;
    xc_type_t *boolean_type;
    xc_type_t *number_type;
    xc_type_t *string_type;
    xc_type_t *array_type;
    xc_type_t *object_type;
    xc_type_t *function_type;
    xc_type_t *error_type;
} xc_runtime_extended_t;
void xc_register_null_type(xc_runtime_t *rt);
void xc_register_boolean_type(xc_runtime_t *rt);
void xc_register_number_type(xc_runtime_t *rt);
void xc_register_string_type(xc_runtime_t *rt);
void xc_register_array_type(xc_runtime_t *rt);
void xc_register_object_type(xc_runtime_t *rt);
void xc_register_function_type(xc_runtime_t *rt);
void xc_register_error_type(xc_runtime_t *rt);
xc_object_t *xc_null_create(xc_runtime_t *rt);
xc_object_t *xc_boolean_create(xc_runtime_t *rt, _Bool value);
xc_object_t *xc_number_create(xc_runtime_t *rt, double value);
xc_object_t *xc_string_create(xc_runtime_t *rt, const char *value);
xc_object_t *xc_string_create_len(xc_runtime_t *rt, const char *value, size_t len);
xc_object_t *xc_array_create(xc_runtime_t *rt);
xc_object_t *xc_array_create_with_capacity(xc_runtime_t *rt, size_t capacity);
xc_object_t *xc_object_create(xc_runtime_t *rt);
xc_object_t *xc_function_create(xc_runtime_t *rt, xc_function_ptr_t fn, void *user_data);
_Bool xc_to_boolean(xc_runtime_t *rt, xc_object_t *obj);
double xc_to_number(xc_runtime_t *rt, xc_object_t *obj);
const char *xc_to_string(xc_runtime_t *rt, xc_object_t *obj);
_Bool xc_is_null(xc_runtime_t *rt, xc_object_t *obj);
_Bool xc_is_boolean(xc_runtime_t *rt, xc_object_t *obj);
_Bool xc_is_number(xc_runtime_t *rt, xc_object_t *obj);
_Bool xc_is_string(xc_runtime_t *rt, xc_object_t *obj);
_Bool xc_is_array(xc_runtime_t *rt, xc_object_t *obj);
_Bool xc_is_object(xc_runtime_t *rt, xc_object_t *obj);
_Bool xc_is_function(xc_runtime_t *rt, xc_object_t *obj);
_Bool xc_is_error(xc_runtime_t *rt, xc_object_t *obj);
_Bool xc_boolean_value(xc_runtime_t *rt, xc_object_t *obj);
double xc_number_value(xc_runtime_t *rt, xc_object_t *obj);
const char *xc_string_value(xc_runtime_t *rt, xc_object_t *obj);
size_t xc_string_length(xc_runtime_t *rt, xc_object_t *obj);
size_t xc_array_length(xc_runtime_t *rt, xc_object_t *obj);
xc_object_t *xc_array_get(xc_runtime_t *rt, xc_object_t *arr, size_t index);
void xc_array_set(xc_runtime_t *rt, xc_object_t *arr, size_t index, xc_object_t *value);
void xc_array_push(xc_runtime_t *rt, xc_object_t *arr, xc_object_t *value);
xc_object_t *xc_array_pop(xc_runtime_t *rt, xc_object_t *arr);
xc_object_t *xc_object_get(xc_runtime_t *rt, xc_object_t *obj, const char *key);
void xc_object_set(xc_runtime_t *rt, xc_object_t *obj, const char *key, xc_object_t *value);
_Bool xc_object_has(xc_runtime_t *rt, xc_object_t *obj, const char *key);
void xc_object_delete(xc_runtime_t *rt, xc_object_t *obj, const char *key);
xc_object_t *xc_function_call(xc_runtime_t *rt, xc_object_t *func, xc_object_t *this_obj, size_t argc, xc_object_t **argv);
void xc_array_foreach(xc_runtime_t *rt, xc_object_t *arr, void (*callback)(xc_runtime_t *rt, size_t index, xc_object_t *value, void *user_data), void *user_data);
void xc_object_foreach(xc_runtime_t *rt, xc_object_t *obj, void (*callback)(xc_runtime_t *rt, const char *key, xc_object_t *value, void *user_data), void *user_data);
_Bool xc_equal(xc_runtime_t *rt, xc_object_t *a, xc_object_t *b);
_Bool xc_strict_equal(xc_runtime_t *rt, xc_object_t *a, xc_object_t *b);
int xc_compare(xc_runtime_t *rt, xc_object_t *a, xc_object_t *b);
typedef struct xc_gc_config {
    size_t initial_heap_size;
    size_t max_heap_size;
    double growth_factor;
    double gc_threshold;
    size_t max_alloc_before_gc;
} xc_gc_config_t;
typedef struct xc_gc_stats {
    size_t heap_size;
    size_t used_memory;
    size_t total_allocated;
    size_t total_freed;
    size_t gc_cycles;
    double avg_pause_time_ms;
    double last_pause_time_ms;
} xc_gc_stats_t;
void xc_gc_init(xc_runtime_t *rt, const xc_gc_config_t *config);
void xc_gc_shutdown(xc_runtime_t *rt);
void xc_gc_run(xc_runtime_t *rt);
void xc_gc_enable(xc_runtime_t *rt);
void xc_gc_disable(xc_runtime_t *rt);
_Bool xc_gc_is_enabled(xc_runtime_t *rt);
xc_object_t *xc_gc_alloc(xc_runtime_t *rt, size_t size, int type_id);
void xc_gc_free(xc_runtime_t *rt, xc_object_t *obj);
void xc_gc_mark_permanent(xc_runtime_t *rt, xc_object_t *obj);
void xc_gc_mark(xc_runtime_t *rt, xc_object_t *obj);
void xc_gc_add_ref(xc_runtime_t *rt, xc_object_t *obj);
void xc_gc_release(xc_runtime_t *rt, xc_object_t *obj);
int xc_gc_get_ref_count(xc_runtime_t *rt, xc_object_t *obj);
void xc_gc_add_root(xc_runtime_t *rt, xc_object_t **root_ptr);
void xc_gc_remove_root(xc_runtime_t *rt, xc_object_t **root_ptr);
xc_gc_stats_t xc_gc_get_stats(xc_runtime_t *rt);
void xc_gc_print_stats(xc_runtime_t *rt);
typedef struct xc_exception_frame {
    jmp_buf jmp;
    struct xc_exception_frame *prev;
    xc_object_t *exception;
    _Bool handled;
    const char *file;
    int line;
    void *finally_handler;
    void *finally_context;
} xc_exception_frame_t;
typedef struct xc_stack_trace_entry {
    const char *function;
    const char *file;
    int line;
} xc_stack_trace_entry_t;
typedef struct xc_stack_trace {
    xc_stack_trace_entry_t *entries;
    size_t count;
    size_t capacity;
} xc_stack_trace_t;
typedef struct xc_exception {
    xc_object_t base;
    int type;
    char *message;
    xc_stack_trace_t *stack_trace;
    struct xc_exception *cause;
} xc_exception_t;
void xc_exception_init(xc_runtime_t *rt);
void xc_exception_shutdown(xc_runtime_t *rt);
xc_object_t *xc_exception_create(xc_runtime_t *rt, int type, const char *message);
xc_object_t *xc_exception_create_with_cause(xc_runtime_t *rt, int type, const char *message, xc_object_t *cause);
void xc_exception_throw(xc_runtime_t *rt, xc_object_t *exception);
int xc_exception_get_type(xc_runtime_t *rt, xc_object_t *exception);
const char *xc_exception_get_message(xc_runtime_t *rt, xc_object_t *exception);
xc_object_t *xc_exception_get_cause(xc_runtime_t *rt, xc_object_t *exception);
xc_stack_trace_t *xc_exception_get_stack_trace(xc_runtime_t *rt, xc_object_t *exception);
void xc_stack_trace_print(xc_runtime_t *rt, xc_stack_trace_t *stack_trace);
char *xc_stack_trace_to_string(xc_runtime_t *rt, xc_stack_trace_t *stack_trace);
void xc_exception_rethrow(xc_runtime_t *rt);
void xc_exception_clear(xc_runtime_t *rt);
xc_object_t *xc_exception_create_error(xc_runtime_t *rt, const char *message);
xc_object_t *xc_exception_create_syntax_error(xc_runtime_t *rt, const char *message);
xc_object_t *xc_exception_create_type_error(xc_runtime_t *rt, const char *message);
xc_object_t *xc_exception_create_reference_error(xc_runtime_t *rt, const char *message);
xc_object_t *xc_exception_create_range_error(xc_runtime_t *rt, const char *message);
xc_object_t *xc_exception_create_memory_error(xc_runtime_t *rt, const char *message);
xc_object_t *xc_exception_create_internal_error(xc_runtime_t *rt, const char *message);
xc_val xc_std_get_console(void);
void xc_std_console_initialize(void);
void xc_std_console_cleanup(void);
xc_val xc_std_get_math(void);
void xc_std_math_initialize(void);
void xc_std_math_cleanup(void);
